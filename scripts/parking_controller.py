#!/usr/bin/env python

import rospy
import numpy as np

from visual_servoing.msg import ConeLocation, ParkingError
from ackermann_msgs.msg import AckermannDriveStamped
#from utilities.controllers import iLQR, circle_cost, make_iLQR_CAR

class ParkingController():
    """
    A controller for parking in front of a cone.
    Listens for a relative cone location and publishes control commands.
    Can be used in the simulator and on the real robot.
    """
    def __init__(self):
        rospy.Subscriber("/relative_cone", ConeLocation,
            self.relative_cone_callback)

        DRIVE_TOPIC = rospy.get_param("~drive_topic") # set in launch file; different for simulator vs racecar
        self.drive_pub = rospy.Publisher(DRIVE_TOPIC,
            AckermannDriveStamped, queue_size=10)
        self.error_pub = rospy.Publisher("/parking_error",
            ParkingError, queue_size=10)

        self.parking_distance = .75 # meters; try playing with this number!
        self.relative_x = 0
        self.relative_y = 0
        
        #Compute cost functions for circle trajectory.
        radius, velocity = 1, 1
		#cost_stage, cost_final = circle_cost(radius, velocity)
		
		#Make iLQR object.
		#self.controller = make_iLQR_CAR(cost_stage, cost_final, 0.325, time_step = 0.1)
        
        #Run iLQR main loop.
        x0 = np.array([0, 2, 0, 0, 0]) 
        N = 50
        #self.x_trj, self.u_trj, cost_trace, regu_trace, redu_ratio_trace, redu_trace = self.controller.run_ilqr(x0, N, max_iter=50, regu_init=100)
        u_trj = np.array([[ 4.81204232e-01,  9.92634759e-03],
       [ 4.60540328e-01,  1.07677535e-02],
       [ 4.39890270e-01,  1.24199691e-02],
       [ 4.19257117e-01,  1.48335994e-02],
       [ 3.98644885e-01,  1.79549556e-02],
       [ 3.78059219e-01,  2.17251670e-02],
       [ 3.57505579e-01,  2.60842468e-02],
       [ 3.36991529e-01,  3.09686734e-02],
       [ 3.16523728e-01,  3.63127634e-02],
       [ 2.96110358e-01,  4.20502322e-02],
       [ 2.75759076e-01,  4.81134259e-02],
       [ 2.55477579e-01,  5.44343080e-02],
       [ 2.35273078e-01,  6.09437675e-02],
       [ 2.15152555e-01,  6.75724612e-02],
       [ 1.95121865e-01,  7.42499351e-02],
       [ 1.75185871e-01,  8.09055646e-02],
       [ 1.55348650e-01,  8.74672119e-02],
       [ 1.35612043e-01,  9.38621915e-02],
       [ 1.15976795e-01,  1.00016043e-01],
       [ 9.64416886e-02,  1.05852650e-01],
       [ 7.70032461e-02,  1.11295136e-01],
       [ 5.76554655e-02,  1.16265032e-01],
       [ 3.83901890e-02,  1.20683194e-01],
       [ 1.91966897e-02,  1.24470617e-01],
       [ 6.18191740e-05,  1.27549038e-01],
       [-1.90305818e-02,  1.29842760e-01],
       [-3.80985655e-02,  1.31280116e-01],
       [-5.71623037e-02,  1.31795624e-01],
       [-7.62441757e-02,  1.31332263e-01],
       [-9.53666408e-02,  1.29844604e-01],
       [-1.14553684e-01,  1.27301209e-01],
       [-1.33828053e-01,  1.23688332e-01],
       [-1.53211663e-01,  1.19011993e-01],
       [-1.72723692e-01,  1.13302308e-01],
       [-1.92380206e-01,  1.06614490e-01],
       [-2.12193052e-01,  9.90315523e-02],
       [-2.32168766e-01,  9.06658626e-02],
       [-2.52308253e-01,  8.16574407e-02],
       [-2.72605466e-01,  7.21751482e-02],
       [-2.93048831e-01,  6.24123118e-02],
       [-3.13620560e-01,  5.25846812e-02],
       [-3.34296332e-01,  4.29248997e-02],
       [-3.55048922e-01,  3.36762722e-02],
       [-3.75846386e-01,  2.50860541e-02],
       [-3.96655824e-01,  1.73986432e-02],
       [-4.17443808e-01,  1.08468159e-02],
       [-4.38180911e-01,  5.64458655e-03],
       [-4.58854407e-01,  1.97835000e-03],
       [-4.79549473e-01, -2.97529275e-08]])
        x_trj = np.array([[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.81204232e-02,
        9.92634759e-04],
       [4.81204232e-03, 0.00000000e+00, 1.46972370e-05, 9.41744560e-02,
        2.06941011e-03],
       [1.42294879e-02, 1.38410430e-07, 7.46621138e-05, 1.38163483e-01,
        3.31140702e-03],
       [2.80458362e-02, 1.16996820e-06, 2.15436637e-04, 1.80089195e-01,
        4.79476696e-03],
       [4.60547552e-02, 5.04974921e-06, 4.81126587e-04, 2.19953683e-01,
        6.59026252e-03],
       [6.80501210e-02, 1.56323053e-05, 9.27149202e-04, 2.57759605e-01,
        8.76277922e-03],
       [9.38260704e-02, 3.95304631e-05, 1.62214869e-03, 2.93510163e-01,
        1.13712039e-02],
       [1.23177048e-01, 8.71421547e-05, 2.64913569e-03, 3.27209316e-01,
        1.44680712e-02],
       [1.55897865e-01, 1.73824241e-04, 4.10587971e-03, 3.58861689e-01,
        1.80993476e-02],
       [1.91783731e-01, 3.21168120e-04, 6.10460948e-03, 3.88472724e-01,
        2.23043708e-02],
       [2.30630280e-01, 5.58314074e-04, 8.77109466e-03, 4.16048632e-01,
        2.71157134e-02],
       [2.72233543e-01, 9.23229589e-04, 1.22431627e-02, 4.41596390e-01,
        3.25591442e-02],
       [3.16389872e-01, 1.46386973e-03, 1.66687268e-02, 4.65123698e-01,
        3.86535209e-02],
       [3.62895780e-01, 2.23913581e-03, 2.22033816e-02, 4.86638953e-01,
        4.54107671e-02],
       [4.11547681e-01, 3.31955007e-03, 2.90076434e-02, 5.06151140e-01,
        5.28357606e-02],
       [4.62141501e-01, 4.78756935e-03, 3.72438875e-02, 5.23669727e-01,
        6.09263170e-02],
       [5.14472159e-01, 6.73746813e-03, 4.70730580e-02, 5.39204592e-01,
        6.96730382e-02],
       [5.68332889e-01, 9.27473175e-03, 5.86511902e-02, 5.52765796e-01,
        7.90592574e-02],
       [6.23514421e-01, 1.25149105e-02, 7.21258152e-02, 5.64363476e-01,
        8.90608617e-02],
       [6.79804037e-01, 1.65818998e-02, 8.76322805e-02, 5.74007645e-01,
        9.96461267e-02],
       [7.36984541e-01, 2.16056240e-02, 1.05290036e-01, 5.81707969e-01,
        1.10775640e-01],
       [7.94833195e-01, 2.77191190e-02, 1.25198945e-01, 5.87473516e-01,
        1.22402144e-01],
       [8.53120722e-01, 3.50550256e-02, 1.47435653e-01, 5.91312535e-01,
        1.34470463e-01],
       [9.11610463e-01, 4.37415304e-02, 1.72050061e-01, 5.93232204e-01,
        1.46917525e-01],
       [9.70057827e-01, 5.38978141e-02, 1.99061985e-01, 5.93238386e-01,
        1.59672428e-01],
       [1.02821017e+00, 6.56290988e-02, 2.28458019e-01, 5.91335327e-01,
        1.72656704e-01],
       [1.08580722e+00, 7.90214175e-02, 2.60188720e-01, 5.87525471e-01,
        1.85784716e-01],
       [1.14258224e+00, 9.41362696e-02, 2.94166160e-01, 5.81809240e-01,
        1.98964278e-01],
       [1.19826396e+00, 1.11005359e-01, 3.30261960e-01, 5.74184823e-01,
        2.12097505e-01],
       [1.25257940e+00, 1.29625647e-01, 3.68305896e-01, 5.64648159e-01,
        2.25081965e-01],
       [1.30525761e+00, 1.49954983e-01, 4.08085208e-01, 5.53192790e-01,
        2.37812086e-01],
       [1.35603420e+00, 1.71908577e-01, 4.49344709e-01, 5.39809985e-01,
        2.50180919e-01],
       [1.40465661e+00, 1.95356594e-01, 4.91787833e-01, 5.24488819e-01,
        2.62082118e-01],
       [1.45088978e+00, 2.20123092e-01, 5.35078695e-01, 5.07216450e-01,
        2.73412349e-01],
       [1.49452198e+00, 2.45986502e-01, 5.78845286e-01, 4.87978429e-01,
        2.84073798e-01],
       [1.53537041e+00, 2.72681738e-01, 6.22683792e-01, 4.66759124e-01,
        2.93976953e-01],
       [1.57328600e+00, 2.99903940e-01, 6.66164065e-01, 4.43542247e-01,
        3.03043540e-01],
       [1.60815721e+00, 3.27313730e-01, 7.08836128e-01, 4.18311422e-01,
        3.11209284e-01],
       [1.63991206e+00, 3.54543741e-01, 7.50237554e-01, 3.91050875e-01,
        3.18426799e-01],
       [1.66851849e+00, 3.81206081e-01, 7.89901464e-01, 3.61745992e-01,
        3.24668030e-01],
       [1.69398234e+00, 4.06900317e-01, 8.27364785e-01, 3.30383936e-01,
        3.29926498e-01],
       [1.71634332e+00, 4.31221542e-01, 8.62176349e-01, 2.96954303e-01,
        3.34218988e-01],
       [1.73566871e+00, 4.53768115e-01, 8.93904380e-01, 2.61449411e-01,
        3.37586615e-01],
       [1.75204520e+00, 4.74148706e-01, 9.22142833e-01, 2.23864772e-01,
        3.40095220e-01],
       [1.76556918e+00, 4.91988444e-01, 9.46516128e-01, 1.84199190e-01,
        3.41835085e-01],
       [1.77633587e+00, 5.06934073e-01, 9.66681855e-01, 1.42454809e-01,
        3.42919766e-01],
       [1.78442778e+00, 5.18658181e-01, 9.82331081e-01, 9.86367180e-02,
        3.43484225e-01],
       [1.78990296e+00, 5.26862720e-01, 9.93186035e-01, 5.27512773e-02,
        3.43682060e-01],
       [1.79278330e+00, 5.31282063e-01, 9.98994926e-01, 4.79633005e-03,
        3.43682057e-01]])
        self.x_trj = x_trj.tolist()
        self.u_trj = u_trj.tolist()

        self.prev_time = rospy.get_time()

        self.acc_cmd, self.steer_vel, self.v, self.theta = 0,0,0,0

    def relative_cone_callback(self, msg):
        delta_t = rospy.get_time() - self.prev_time
        if delta_t >= 0.1:
            try:
                self.acc_cmd, self.steer_vel = self.u_trj.pop(0)
                _,_,_,self.v,self.theta = self.x_trj.pop(0)
                self.prev_time = rospy.get_time()
            except:
                pass

        self.relative_x = msg.x_pos
        self.relative_y = msg.y_pos


        drive_cmd = AckermannDriveStamped()

        drive_cmd.header.stamp = rospy.get_rostime()
        drive_cmd.header.frame_id = 'base_link'
        drive_cmd.drive.acceleration = self.acc_cmd
        drive_cmd.drive.steering_angle_velocity = self.steer_vel
        drive_cmd.drive.speed = self.v
        drive_cmd.drive.steering_angle = self.theta 


        #################################

        # YOUR CODE HERE
        # Use relative position and your control law to set drive_cmd

        #################################

        self.drive_pub.publish(drive_cmd)
        #self.error_publisher()

    def error_publisher(self):
        """
        Publish the error between the car and the cone. We will view this
        with rqt_plot to plot the success of the controller
        """
        error_msg = ParkingError()

        #################################

        # YOUR CODE HERE
        # Populate error_msg with relative_x, relative_y, sqrt(x^2+y^2)

        #################################
        
        self.error_pub.publish(error_msg)

if __name__ == '__main__':
    try:
        rospy.init_node('ParkingController', anonymous=True)
        ParkingController()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
